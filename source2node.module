<?php
// $Id$ 

/** 
* @file 
* Base module file for source2node
*/

// Convert absolute urls to relative urls?
define('SOURCE2NODE_URLS_MAKE_RELATIVE', TRUE);

// Provide extra whitespace cleanup like trimming <br> tags from ends, etc
define('SOURCE2NODE_WHITESPACE_CLEANUP', TRUE);

/**
 * Implementation of hook_form_alter
 */
function source2node_form_alter(&$form, $form_state, $form_id) {

  if (!user_access('administer source2node')) {
    return;
  }

  //is this a node edit form
  if (substr($form['#form_id'], -9) != 'node_form') {
    return;
  }

  //has module been setup for this node type?
  if (_source2node_get_insert_body_field($form['type']['#value']) == -1 && _source2node_get_insert_title_field($form['type']['#value']) == -1) {
    return;
  }
  
  $node = new stdClass();
  if (isset($form['#node']->nid)) {
    $node = $form['#node'];
  }

  //If I want to make the defaults more specific than global then I'll need to
  //edit $id to something besides ''
  $id = '_';
  $form['#source2node_global_id'] = $id;
  
  //these classes will be used by js to know where to put things
  if (($key = _source2node_get_insert_title_field($form['type']['#value'])) && isset($form[$key])) {
    $form[$key]['#attributes']['class'][] = 'source2node-insert-title-field';
  }
  if (($key = _source2node_get_insert_body_field($form['type']['#value'])) && isset($form[$key])) {
    $form[$key]['#attributes']['class'][] = 'source2node-insert-body-field';
  }
  
  //communicate with our script  
  drupal_add_js(array('source2node' => array(
    'token' => drupal_get_token('source2node'),
    'globalId' => str_replace('_', '-', $id),
    //'insertTitleField' => _source2node_get_insert_title_field($form['type']['#value']),
    //'insertBodyField' => _source2node_get_insert_body_field($form['type']['#value']),
  )), 'setting');  
  drupal_add_js(drupal_get_path('module', 'source2node') .'/source2node.js');

  $form['source2node'. $id] = array(
    '#type' => 'fieldset',
    '#title' => t('HTML To Node'),
    '#collapsible' => TRUE,
    '#collapsed' => !empty($form['nid']['#value']),
    '#weight' => $form['title']['#weight'] - 1,
  );
  
  $form['source2node' . $id]['source2node'. $id .'url'] = array(
    '#type' => 'textfield',
    '#description' => t('Enter the url of the page you wish to scrape.'),
    '#title' => t('URL of Source'),
    '#default_value' => _source2node_get_default_url($id, $node),
    '#required' => FALSE,
  );

  $form['source2node' . $id]['source2node'. $id .'title'] = array(
    '#type' => 'textfield',
    '#description' => t('Enter the html tag that contains the title of the page, e.g. <strong>h1</strong>.  The title tag does <em>not</em> need to exist within your Body selection, but if it does, it will be removed from the body. You may also enter regex like this <strong>/&lt;h1[^>]*>(.*?)&lt;\/h1>/</strong> (Notice that the title is extracted as Group 1)'),
    '#title' => t('Title Tag'),
    '#default_value' => _source2node_get_default_title_tag($id),
    '#required' => FALSE,
  );

  $form['source2node' . $id]['source2node'. $id .'begin'] = array(
    '#type' => 'textarea',
    '#description' => t('Enter the text that marks the end of your section in the source. E.g. <strong>&lt;!-- InstanceBeginEditable name="bodytext" --></strong> You may enter <strong>regex strings</strong>; indicate this by wrapping your string in forward-slashes, e.g. <strong>/&lt;body\b[^>]*>/</strong>'),
    '#title' => t('Body Start Text'),
    '#default_value' => _source2node_get_default_begin($id),
    '#required' => FALSE,
    '#rows' => 2,
  );
  
  $form['source2node' . $id]['source2node'. $id .'end'] = array(
    '#type' => 'textarea',
    '#description' => t('Enter the text that marks the end of your section in the source. E.g. <strong>&lt;!-- InstanceEndEditable --></strong> You may enter regex strings; indicate this by wrapping your string in forward-slashes'),
    '#title' => t('Body End Text'),
    '#default_value' => _source2node_get_default_end($id),
    '#required' => FALSE,
    '#rows' => 2,
  );
  
  
  //@todo This needs work for offsets and regex
  //$form['source2node' . $id]['source2node'. $id .'offset'] = array(
  //  '#type' => 'textfield',
  //  '#description' => t('If the above delimiters wrap more than one section, enter the offset as an integer of the section you wish returned, where <strong>0 is the first section on the page.</strong>'),
  //  '#title' => t('Body Offset'),
  //  '#default_value' => _source2node_get_default_offset($id),
  //  '#required' => FALSE,
  //);
  
  $form['source2node' . $id]['source2node'. $id .'find_replace'] = array(
    '#type' => 'fieldset',
    '#attributes' => array(
      'class' => array('source2node-advanced'),
    ),
    '#title' => t('Find and Replace'),
    '#description' => t('You may do text find and replacements when the source is returned.  To do so, add each find string (one per line) in the <strong>Find</strong> box.  Then add the corresponding replacement string (one per line) in the <strong>Replace</strong> box. <strong>Order is important!</strong> The find and replacments need to match the same line in both boxes. To delete text (instead of replace) enter the following on the replacement line: <strong>[delete]</strong>.'),
    '#collapsible' => TRUE,
    
    //only collapse if the find and repalce are empty
    '#collapsed' => TRUE,
  );
  
  $form['source2node' . $id]['source2node'. $id .'find_replace']['source2node'. $id .'find'] = array(
    '#type' => 'textarea',
    '#title' => t('Find'),
    '#default_value' => _source2node_get_default_find($id),
    '#required' => FALSE,
    '#rows' => 5,
    '#resizable' => TRUE,
  );

  $form['source2node' . $id]['source2node'. $id .'find_replace']['source2node'. $id .'replace'] = array(
    '#type' => 'textarea',
    '#title' => t('Replace'),
    '#default_value' => _source2node_get_default_replace($id),
    '#required' => FALSE,
    '#rows' => 5,
    '#resizable' => TRUE,     
  );
  
  $form['source2node' . $id]['source2node'. $id .'find_active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Find and Replace'),
    '#default_value' => _source2node_get_default_find_active($id),
  );    
  
  $form['source2node' . $id]['source2node'. $id .'get_source'] = array(
    '#type' => 'button',
    '#value' => t('Get Source Code Now', array(
      '%url' => _source2node_get_default_url($id, $node),
    )),
  );
  
  if (module_exists('redirect')) {
    
    //get the redirect path
    preg_match('/(http:\/\/)?.*\/(.*)$/', _source2node_get_default_url($id, $node), $found);
    $redirect = !empty($found[2]) ? $found[2] : '';
    $form['source2node'. $id .'redirect'] = array('#type' => 'hidden', '#value' => $redirect);
    
    $form['source2node' . $id]['source2node'. $id .'do_redirect'] = array(
      '#type' => 'checkbox',
      '#title' => t('Create a 301 redirect from <span id="source2node-redirect">%url</span> to this node. (This will happen when the node is saved.) <strong>Unchecking this will NOT delete a redirect that was previously created!</strong> <a href="@list">Click here</a> for a list of previously created redirects.', array(
        '%url' => empty($redirect) ? '???' : $redirect,
        '@list' => url('admin/config/search/redirect'),
      )),
      '#default_value' => _source2node_get_default_redirect($id),
    );
  }
  
  //send off to create the redirect
  $form['actions']['submit']['#submit'][] = 'source2node_node_form_submit';

}

/**
 * Form submission handler for source2node_form_alter().
 */
function source2node_node_form_submit($form, &$form_state) {

  //set up the defaults for next time: smart learning
  $id = $form['#source2node_global_id'];
  variable_set('source2node_default_title', $form_state['values']['source2node'. $id .'title']);
  variable_set('source2node_default_begin', $form_state['values']['source2node'. $id .'begin']);
  variable_set('source2node_default_end', $form_state['values']['source2node'. $id .'end']);
  variable_set('source2node_default_find_active', $form_state['values']['source2node'. $id .'find_active']);
  variable_set('source2node_default_find', $form_state['values']['source2node'. $id .'find']);
  variable_set('source2node_default_replace', $form_state['values']['source2node'. $id .'replace']);
  variable_set('source2node_default_redirect', $form_state['values']['source2node'. $id .'redirect']);
  
  //@todo remove the isset after offset is devved
  if (isset($form_state['values']['source2node'. $id .'offset'])) {
    variable_set('source2node_default_offset', $form_state['values']['source2node'. $id .'offset']);
  }
  
  
  //get the node from the edit form
  if (!empty($form['#node']->nid)) {
    $nid = $form['#node']->nid;
  }
  //or get the node from the node/add form
  elseif ($form_state['nid']) {
    $nid = $form_state['nid'];
  }
  
  //create a redirect
  if ($nid > 0 && $form_state['values']['source2node'. $id .'do_redirect'] && preg_match('/(http:\/\/)?.*\/(.*)$/', $form_state['values']['source2node'. $id .'url'], $found) && !empty($found[2])) {
    $redirect = array(
      'source' => $found[2],
      'redirect' => 'node/'. $form_state['nid'],
      'language' => LANGUAGE_NONE,
    );
    
    //see if it already exists
    $exists = redirect_load_by_hash(redirect_get_redirect_hash($redirect));
    if (empty($exists['rid'])) {
      redirect_save($redirect);
      drupal_set_message(t('A 301 redirect has been created from %from to %to', array(
        '%from' => $redirect['source'],
        '%to' => $redirect['redirect'],
      )));
    }
    else {
      drupal_set_message(t('A redirect already exists.'));
    }
  }
  
  //update our own record of this
  $data = array(
    'nid' => $nid,
    'source' => $form_state['values']['source2node_url'],
  );
  db_query("DELETE FROM {source2node_index} WHERE nid = :nid", array(
    ':nid' => $nid,
  ));
  drupal_write_record('source2node_index', $data);
  
  //allow other modules to do stuff with this data
  module_invoke_all('source2node_index', $form_state['values']['source2node_url'], $nid);
}

/**
 * Implementation of hook_enable()
 */
function source2node_enable() {
  //message about module settings
  //drupal_set_message(t('You may adjust settings for HTML To Node by visiting <a href="@url">@url</a>.', array('@url' => '/admin/settings/source2node')));

  //make a note of who enabled it
  global $user;
  watchdog('source2node', 'source2node module enabled by %user (uid: %uid)', array('%user' => $user->name, '%uid' => $user->uid));
  
  //change the system weight for the module, if needed
  //$weight = db_result(db_query_range("SELECT weight FROM {system} WHERE name = 'fieldgroup'", 1));
  //db_query("UPDATE {system} SET `weight` = ". ++$weight ." WHERE name = 'source2node'"); //don't do alimit on this query in case there are more than one entries?
}

/**
 * Implementation of hook_disable()
 */
function source2node_disable() {
  //make a note of who disabled it
  global $user;
  watchdog('source2node', 'source2node module disabled by %user (uid: %uid)', array('%user' => $user->name, '%uid' => $user->uid));
}

/**
 * Implementation of hook_perm()
 */
function source2node_permission() {
  return array(
    'administer source2node' => array(
      'title' => t('Administer source2node'), 
      'description' => t('Perform administration tasks for source2node.'),
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function source2node_menu() {
  $items = array();
  
  //$items['admin/settings/source2node'] = array(
  //  'title' => 'source2node settings',
  //  'description' => 'Configure how HTML To Node behaves.',
  //  'page callback' => 'drupal_get_form',
  //  'page arguments' => array('source2node_admin_settings'),
  //  'file' => 'source2node.admin.inc',
  //  'access arguments' => array('administer source2node'),
  //  'type' => MENU_NORMAL_ITEM,
  //);

  $items['source2node/get'] = array(
   'title' => 'ajax handler',
   'page callback' => 'source2node_ajax',
   'access arguments' => array('use ajax'),
   'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_preprocess_page()
 */
function source2node_preprocess_page(&$vars) {

}

/**
 * Implementation of hook_preprocess_node()
 */
function source2node_preprocess_node(&$vars) {
  $node = $vars['node'];
}


/**
 * Implementation of hook_views_api().
 */
//function source2node_views_api() {
//  return array(
//    'api' => 2,
//    'path' => drupal_get_path('module', 'source2node'),
//  );
//}

/**
 * Get the contents of an html page
 *
 * @param url $url
 *   The url of the html page to grab
 *
 * @return string
 */
function _source2node_get_page($url) {
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
  ob_start();
  curl_exec($ch);
  $source = ob_get_contents();
  ob_end_clean();
  curl_close($ch);
  return $source;
}

/**
 * Get a section from source using delimiters
 *
 * @param string $source
 *   If this string begins with / and ends with /; it is assumed to be regex
 * @param string $begin
 *   This is the beginning string that marks the left demarkator
 *   If this string begins with / and ends with /; it is assumed to be regex
 * @param string $end
 *
 * @return string
 *   It will be stripped of leading and trailing whitespace and will not include
     the delimiters
 */
function _source2node_get_section($source, $begin, $end, $offset = 0) {
  
  //make sure 0 is really 0 so the key works
  $offset = (int)$offset;
  
  //start
  if (_source2node_is_regex($begin)) {
    preg_match_all($begin, $source, $found, PREG_OFFSET_CAPTURE);
    $left = $found[0][$offset][1] + strlen($found[0][$offset][0]);
  }
  elseif (!empty($begin)) {
    //non-regex
    $current_section = 0;
    $left = 0;
    while ($current_section <= $offset) {
      $left = stripos($source, $begin, $left) + strlen($begin);
      $current_section++;
    }
  }
  else {
    $left = 0;
  }

  //end
  if (_source2node_is_regex($end)) {
    preg_match_all($end, $source, $found, PREG_OFFSET_CAPTURE, $left);
    $right = $found[0][$offset][1];    
  }
  elseif (!empty($end)) {
    //non-regex
    $right = stripos($source, $end, $left);
  }
  else {
    $right = strlen($source);
  }
  
  $section = trim(substr($source, $left, $right - $left));
  return $section;
}

/**
 * Determine if the delimiter is a regex expression
 */
function _source2node_is_regex($delimiter) {
  return preg_match('/^\/(.*)\/(\w*)$/', $delimiter);
}

/**
 * Get the default url based on the last use via session
 * 
 * @param string $field
 *  The field for which this text is to be used
 *
 * @return string
 */
function _source2node_get_default_url($field, $node = NULL) {
  if (empty($node->nid)) {
    return variable_get('source2node_default_url', '');
  }
  
  static $sources = array();
  if (empty($sources[$node->nid])) {
    if ($source = db_query("SELECT source FROM {source2node_index} WHERE nid = :nid", array(
      ':nid' => $node->nid,
    ))->fetchField()) {
    }
    $sources[$node->nid] = $source;
  }
  return $sources[$node->nid];
}

/**
 * Get the default title tag
 * 
 * @param string $field
 *  The field for which this text is to be used
 *
 * @return string
 */
function _source2node_get_default_title_tag($field) {
  return variable_get('source2node_default_title', 'h1');
}

/**
 * Get the default beignning text
 *
 * @param string $field
 *  The field for which this text is to be used
 *
 * @return string
 */
function _source2node_get_default_begin($field) {
  return variable_get('source2node_default_begin', '/<body\b[^>]*>/');
}

/**
 * Get the default ending text
 * 
 * @param string $field
 *  The field for which this text is to be used
 *
 * @return string
 */
function _source2node_get_default_end($field) {
  return variable_get('source2node_default_end', '</body>');
}

/**
 * Get the default find 
 *
 * @param string $field
 *  The field for which this text is to be used
 *
 * @return string
 */
function _source2node_get_default_find($field) {
  return variable_get('source2node_default_find', '');
}

/**
 * Get the default offset
 *
 * @param string $field
 *  The field for which this text is to be used
 *
 * @return string
 */
function _source2node_get_default_offset($field) {
  return variable_get('source2node_default_offset', '');
}

/**
 * Get the default find activated setting
 *
 * @param string $field
 *  The field for which this text is to be used
 *
 * @return string
 */
function _source2node_get_default_find_active($field) {
  return variable_get('source2node_default_find_active', TRUE);
}

/**
 * Get the default find activated setting
 *
 * @param string $field
 *  The field for which this text is to be used
 *
 * @return string
 */
function _source2node_get_default_redirect($field) {
  return variable_get('source2node_default_redirect', TRUE);
}

/**
 * Get the default replace
 *
 * @param string $field
 *  The field for which this text is to be used
 *
 * @return string
 */
function _source2node_get_default_replace($field) {
  return variable_get('source2node_default_replace', '');
}

/**
 * Handle the ajax loading of source content
 */
function source2node_ajax() {

  $token = isset($_POST['token']) ? $_POST['token'] : '';
  
  //check the token
  $success = TRUE;
  if (drupal_valid_token($token, 'source2node')) {
    $values = $_POST;
    
    if (!($source = _source2node_get_page($values['url']))) {
      $success = FALSE;
      $message = t('Could not get source code from @url.', array(
        '@url' => $values['url'],
      ));
    }
    elseif(!($section = _source2node_get_section($source, $values['begin'], $values['end'], $values['offset']))) {
      $success = FALSE;
      $message = t('Could not extract section based on delimiters.');
    }
    else {

      /**
       * if we're here, we have a successful $souce variable
       */      
      
      //now compute the title tag regex
      $title_regex = $values['title'];
      if (!_source2node_is_regex($title_regex)) {
        if (preg_match('/\w+/', $title_regex, $found)) {
          $title_regex = '/<'. $found[0] .'[^>]*>(.*?)<\/'. $found[0] .'>/s';
        }
        else {
          $title_regex = NULL;
        }
      }

      //now grab the title from the source
      if ($title_regex && preg_match($title_regex, $source, $found) && !empty($found[1])) {
        
        //strip the <h1> and contents out of the body, if it happens to be there
        $body = trim(str_replace($found[0], '', $section));
  
        //in the rare cases there is html embedded inside the h1 tag we need to
        //strip it out and place it at the top of the body so we don't loose it
        if (($plain_title = strip_tags($found[1])) != $found[1]) {
          $orphan_html = str_replace($plain_title, '', $found[1]);
          $body = $orphan_html . $body;
        }
                
        //pull the plain text and SOME tags out of the h1
        $title = filter_xss(trim($found[1]), _source2node_get_allowabled_h1_tags());
        
        //to eliminate line breaks and extra spaces, which have no place in an h1 tag
        $title = preg_replace('/\s{2,}/', ' ', $title);
        
        
        $message = t('Title and Body extracted successfully.');
      }
      else {
        $message = t('Section extracted successfully.');
      }
    }
  }
  else {
    $success = FALSE;
    $message = t('Failed bad token.');
  }
  
  $body = isset($body) ? $body : $section;
  
  /**
   * Apply Filters Begin
   */
  $info = pathinfo($values['url']);

  //whitespace cleanup
  if (variable_get('source2node_whitespace_cleanup', SOURCE2NODE_WHITESPACE_CLEANUP)) {
    //strip empty tags
    while (preg_match('/<(\w+)[^>]*>(&nbsp;|\s)*<\/\1>/', $body)) {
      $body = preg_replace('/<(\w+)[^>]*>(&nbsp;|\s)*<\/\1>/', '', $body);  
    }
    
    //trim <br> from both ends
    $body = preg_replace('/^<br>|<br \/>+/si', '', $body);
    $body = preg_replace('/<br>|<br \/>+$/si', '', $body);
    
    //final whitespace trim
    $body = trim($body);
  }
  
  //make all absolute urls relative
  if (variable_get('source2node_url_format', SOURCE2NODE_URLS_MAKE_RELATIVE)) {
    $body = str_replace($info['dirname'] .'/', '/', $body);
  }
  
  //process the find and replace
  if ($values['find'] && $values['replace']) {
    $finds = explode("\n", $values['find']);
    $replaces = explode("\n", $values['replace']);
    foreach ($finds as $index => $find) {
      $replaces[$index] = trim($replaces[$index]) == '[delete]' ? '' : $replaces[$index];
      if (_source2node_is_regex($find)) {
        $body = preg_replace($find, $replaces[$index], $body);
      }
      else {
        $body = str_replace($find, $replaces[$index], $body);  
      }
    }
  }
  
  /**
   * Filters End
   */

  $result = array(
    'result' => (int)$success,
    'message' => $message,
    'elements' => array(
      'title' => isset($title) ? $title : '',
      'body' => $body,
    ),
  );        
    
  //print it out
  drupal_json_output($result);
  exit();
}

/**
 * Return the allowable html tags for an h1
 */
function _source2node_get_allowabled_h1_tags() {
  return array('em', 'strong');
}

/**
 * Implementation of hook_form_alter
 */
function source2node_form_node_type_form_alter(&$form, $form_state) {

  if (!user_access('administer source2node')) {
    return;
  }
  
  //add the node type defaults
  $form['source2node'] = array(
    '#type' => 'fieldset',
    '#title' => t('Source To Node'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
  );
  
  $fields = field_info_instances('node', $form['#node_type']->type);
  $body_options = $title_options = array('-1' => t('Disabled'));
  
  //put in the title field if enabled
  if ($form['#node_type']->has_title) {
    $title_options['title'] = $form['#node_type']->title_label;
  }
  
  
  foreach ($fields as $id => $data) {
    if (isset($data['widget']['type'])) {      
      if (in_array($data['widget']['type'], array('text_textarea', 'text_textarea_with_summary'))) {
        $body_options[$id] = $data['label'];
      }
      elseif (in_array($data['widget']['type'], array('text_textfield', 'text_textarea', 'text_textarea_with_summary'))) {
        $title_options[$id] = $data['label'];
      }
    }
  }
  

  if (empty($body_options)) {
    $form['source2node']['source2node_error'] = array(
      '#markup' => t('Please <a href="@url">add at least one textarea</a> field before enabling this feature.', array(
        '@url' => url('admin/structure/types/manage/' . $form['#node_type']->type . '/fields'),
      )),
    );
  }
  else {
    $form['source2node']['source2node_insert_title_field'] = array(
      '#type' => 'select',
      '#title' => t('Title Insert Field'),
      '#description' => t('Optional. Choose which textbox will receive the &lt;h1> contents. Leave disabled to to turn off the title-grabbing feature.'),
      '#default_value' => _source2node_get_insert_title_field($form['#node_type']->type),
      '#options' => $title_options,
    );
    $form['source2node']['source2node_insert_body_field'] = array(
      '#type' => 'select',
      '#title' => t('Body (Source Code) Insert Field'),
      '#description' => t('Choose which textarea will receive the source code.'),
      '#default_value' => _source2node_get_insert_body_field($form['#node_type']->type),
      '#options' => $body_options,
    );    
  }
  
  $form['#submit'][] = 'source2node_form_node_type_form_submit';
}

/**
 * Form submission handler for node_type_form().
 *
 * @see node_type_form()
 * @see node_type_form_validate()
 */
function source2node_form_node_type_form_submit($form, &$form_state) {
  variable_set('source2node_insert_body_field:' . $form_state['values']['type'], $form_state['values']['source2node_insert_body_field']);
  unset($form_state['values']['source2node_insert_body_field']);
  variable_set('source2node_insert_title_field:' . $form_state['values']['type'], $form_state['values']['source2node_insert_title_field']);
  unset($form_state['values']['source2node_insert_title_field']);
}

/**
 * Get the body insert field for a node type
 *
 * @param string $bundle_name
 *
 * @return int or string
 * - if disabled for this node type; you will get a -1
 */
function _source2node_get_insert_body_field($bundle_name) {
  return variable_get('source2node_insert_body_field:' .$bundle_name, -1);
}

/**
 * Get the title insert field for a node type
 *
 * The contents of the first <h1> will be pasted here
 *
 * @param string $bundle_name
 *
 * @return int or string
 * - if disabled for this node type; you will get a -1
 */
function _source2node_get_insert_title_field($bundle_name) {
  return variable_get('source2node_insert_title_field:' .$bundle_name, -1);
}
